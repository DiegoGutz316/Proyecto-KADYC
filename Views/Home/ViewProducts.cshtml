@model IEnumerable<Proyecto_v1.Models.Product>

@{
    ViewData["Title"] = "Productos";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<link rel="stylesheet" href="~/css/product-catalog.css" asp-append-version="true" />

<section class="kad-section" id="productos">
    <div class="kad-wrap">
        <header class="catalog-header">
            <div class="catalog-title-wrapper">
                <h2 class="title">Catálogo de Productos</h2>
                <div class="catalog-cart-summary">
                    <a asp-controller="Cart" asp-action="Index" class="cart-summary-link">
                        <i class="fas fa-shopping-cart"></i>
                        <span class="cart-summary-text">Mi Carrito</span>
                        <span class="cart-summary-count" id="header-cart-count">[0]</span>
                    </a>
                </div>
            </div>
            <p class="catalog-subtitle">Descubre nuestra colección completa de productos únicos</p>
        </header>

        @if (TempData["Success"] != null)
        {
            <div class="alert alert-success alert-dismissible fade show" role="alert">
                <i class="fas fa-check-circle"></i>
                @TempData["Success"]
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>
        }

        @if (TempData["Error"] != null)
        {
            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                <i class="fas fa-exclamation-circle"></i>
                @TempData["Error"]
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>
        }

        <!-- Filtros y búsqueda -->
        <div class="catalog-filters">
            <div class="filter-search">
                <input type="text" id="product-search" placeholder="Buscar por nombre o descripción..." class="search-input">
                <i class="fas fa-search search-icon"></i>
            </div>
            <div class="filter-category">
                <select id="category-filter" class="category-select">
                    <option value="">Todas las categorías</option>
                    @{
                        var categories = Model?.Select(p => p.Category?.Name).Where(c => !string.IsNullOrEmpty(c)).Distinct();
                        if (categories != null)
                        {
                            foreach (var category in categories)
                            {
                                <option value="@category">@category</option>
                            }
                        }
                    }
                </select>
            </div>
        </div>

        <div class="kad-products-grid" id="products-grid">
            @if (Model != null && Model.Any())
            {
                foreach (var producto in Model)
                {
                    <article class="kad-product-card" 
                             data-category="@producto.Category?.Name" 
                             data-name="@producto.Name.ToLower()" 
                             data-description="@(producto.Description?.ToLower() ?? string.Empty)"
                             data-search-content="@((producto.Name + " " + producto.Description + " " + producto.Category?.Name).ToLower())">
                        <div class="kad-product-image-container">
                            @if (!string.IsNullOrEmpty(producto.ImageUrl))
                            {
                                <div class="kad-product-img" style="background-image:url('@producto.ImageUrl');" role="img" aria-label="@producto.Name"></div>
                            }
                            else
                            {
                                <div class="kad-product-img kad-product-no-image" role="img" aria-label="@producto.Name">
                                    <i class="fas fa-image"></i>
                                </div>
                            }
                            @* <div class="product-overlay">
                                <div class="quick-actions">
                                    <button class="quick-view-btn" onclick="showQuickView(@producto.Id)" title="Vista rápida">
                                        <i class="fas fa-eye"></i>
                                    </button>
                                </div>
                            </div> *@
                            @if (producto.Stock <= 0)
                            {
                                <div class="out-of-stock-badge">Agotado</div>
                            }
                        </div>
                        <div class="kad-product-info">
                            <div class="product-header">
                                @* Título con tooltip para nombres largos *@
                                <h3 class="kad-product-title" title="@producto.Name">@producto.Name</h3>
                                @if (!string.IsNullOrEmpty(producto.Category?.Name))
                                {
                                    <span class="kad-product-category" title="@producto.Category.Name">@producto.Category.Name</span>
                                }
                            </div>
                            <p class="kad-product-desc" title="@producto.Description">@producto.Description</p>
                            <div class="kad-product-meta">
                                <span class="kad-product-price">₡@producto.Price.ToString("N0")</span>
                                @if (producto.Stock > 0)
                                {
                                    <span class="stock-indicator" title="@producto.Stock unidades disponibles">@producto.Stock disponibles</span>
                                }
                                else
                                {
                                    <span class="stock-indicator out-of-stock">Sin stock</span>
                                }
                            </div>
                            <div class="kad-product-actions">
                                @if (producto.Stock > 0)
                                {
                                    <form method="post" asp-controller="Cart" asp-action="AddToCart" class="add-to-cart-form">
                                        <input type="hidden" name="productId" value="@producto.Id">
                                        <div class="quantity-selector">
                                            <label for="quantity-@producto.Id" class="quantity-label">Cantidad:</label>
                                            <select name="quantity" id="quantity-@producto.Id" class="quantity-select">
                                                @for (int i = 1; i <= Math.Min(producto.Stock, 10); i++)
                                                {
                                                    <option value="@i">@i</option>
                                                }
                                            </select>
                                        </div>
                                        <button type="submit" class="kad-btn kad-btn--cart" title="Agregar @producto.Name al carrito">
                                            <i class="fas fa-shopping-cart"></i>
                                            <span class="btn-text">Agregar al Carrito</span>
                                        </button>
                                    </form>
                                }
                                else
                                {
                                    <button class="kad-btn kad-btn--disabled" disabled title="Producto sin stock">
                                        <i class="fas fa-times"></i>
                                        Sin Stock
                                    </button>
                                }
                                <a class="kad-btn kad-btn--outline kad-btn--small" asp-controller="Home" asp-action="DetallesProducto" asp-route-id="@producto.Id" title="Ver detalles de @producto.Name">
                                    <i class="fas fa-info-circle"></i>
                                    <span class="btn-text">Ver detalles</span>
                                </a>
                            </div>
                        </div>
                    </article>
                }
            }
            else
            {
                <div class="empty-catalog">
                    <i class="fas fa-box-open"></i>
                    <h3>No hay productos disponibles</h3>
                    <p>No hay productos disponibles en este momento. ¡Vuelve pronto para ver nuestras novedades!</p>
                </div>
            }
        </div>

        <!-- Indicador de resultados de búsqueda -->
        <div class="search-results-indicator" id="search-results" style="display: none;">
            <p class="search-results-text">
                <i class="fas fa-search"></i>
                <span id="results-count">0</span> productos encontrados
                <button class="clear-search-btn" id="clear-search" title="Limpiar búsqueda">
                    <i class="fas fa-times"></i>
                </button>
            </p>
        </div>

        <!-- Botón flotante del carrito -->
        <div class="floating-cart" id="floating-cart">
            <a asp-controller="Cart" asp-action="Index" class="floating-cart-btn" title="Ir al carrito">
                <i class="fas fa-shopping-cart"></i>
                <span class="floating-cart-count" id="floating-cart-count">0</span>
            </a>
        </div>
    </div>
</section>

<script>
document.addEventListener('DOMContentLoaded', function() {
    updateCartCounts();
    initializeCartFunctionality();
    initializeFilters();
    initializeProductTitleTooltips();
});

function updateCartCounts() {
    fetch('@Url.Action("GetCartCount", "Cart")')
        .then(response => response.json())
        .then(count => {
            // Actualizar todos los contadores
            const headerCount = document.getElementById('header-cart-count');
            const floatingCount = document.getElementById('floating-cart-count');
            
            if (headerCount) {
                headerCount.textContent = '[' + count + ']';
            }
            
            if (floatingCount) {
                floatingCount.textContent = count;
                // Mostrar/ocultar botón flotante según el contenido
                const floatingCart = document.getElementById('floating-cart');
                if (count > 0) {
                    floatingCart.classList.add('show');
                } else {
                    floatingCart.classList.remove('show');
                }
            }
        })
        .catch(error => console.error('Error updating cart count:', error));
}

function initializeCartFunctionality() {
    const addToCartForms = document.querySelectorAll('.add-to-cart-form');
    
    addToCartForms.forEach(form => {
        form.addEventListener('submit', function(e) {
            const button = this.querySelector('.kad-btn--cart');
            const originalContent = button.innerHTML;
            
            // Mostrar estado de carga
            button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> <span class="btn-text">Agregando...</span>';
            button.disabled = true;
            
            // Simular delay para mejor UX
            setTimeout(() => {
                button.innerHTML = '<i class="fas fa-check"></i> <span class="btn-text">¡Agregado!</span>';
                button.style.background = 'linear-gradient(135deg, #28a745 0%, #20c997 100%)';
                
                // Restaurar estado original después de 2 segundos
                setTimeout(() => {
                    button.innerHTML = originalContent;
                    button.style.background = '';
                    button.disabled = false;
                    updateCartCounts(); // Actualizar contadores
                }, 2000);
            }, 500);
        });
    });
}

function initializeFilters() {
    const searchInput = document.getElementById('product-search');
    const categoryFilter = document.getElementById('category-filter');
    const productCards = document.querySelectorAll('.kad-product-card');
    const searchResults = document.getElementById('search-results');
    const resultsCount = document.getElementById('results-count');
    const clearSearchBtn = document.getElementById('clear-search');
    
    function filterProducts() {
        const searchTerm = searchInput.value.toLowerCase().trim();
        const selectedCategory = categoryFilter.value;
        let visibleCount = 0;
        
        productCards.forEach(card => {
            // Obtener todos los datos de búsqueda del producto
            const searchContent = card.dataset.searchContent || '';
            const productCategory = card.dataset.category || '';
            
            // Verificar coincidencias
            const matchesSearch = !searchTerm || searchContent.includes(searchTerm);
            const matchesCategory = !selectedCategory || productCategory === selectedCategory;
            
            if (matchesSearch && matchesCategory) {
                card.style.display = 'flex';
                card.style.animation = 'fadeIn 0.3s ease';
                visibleCount++;
                
                // Resaltar texto coincidente si hay búsqueda
                if (searchTerm) {
                    highlightSearchTerm(card, searchTerm);
                } else {
                    removeHighlight(card);
                }
            } else {
                card.style.display = 'none';
                removeHighlight(card);
            }
        });
        
        // Mostrar/ocultar indicador de resultados de búsqueda
        if (searchTerm || selectedCategory) {
            searchResults.style.display = 'block';
            resultsCount.textContent = visibleCount;
            
            // Mostrar mensaje especial si no hay resultados
            if (visibleCount === 0) {
                showNoResultsMessage(searchTerm, selectedCategory);
            } else {
                hideNoResultsMessage();
            }
        } else {
            searchResults.style.display = 'none';
            hideNoResultsMessage();
        }
    }
    
    function highlightSearchTerm(card, searchTerm) {
        // Resaltar en el título
        const title = card.querySelector('.kad-product-title');
        if (title) {
            highlightTextInElement(title, searchTerm);
        }
        
        // Resaltar en la descripción
        const description = card.querySelector('.kad-product-desc');
        if (description) {
            highlightTextInElement(description, searchTerm);
        }
        
        // Resaltar en la categoría
        const category = card.querySelector('.kad-product-category');
        if (category) {
            highlightTextInElement(category, searchTerm);
        }
    }
    
    function highlightTextInElement(element, searchTerm) {
        if (!element.dataset.originalText) {
            element.dataset.originalText = element.textContent;
        }
        
        const originalText = element.dataset.originalText;
        const regex = new RegExp(`(${escapeRegExp(searchTerm)})`, 'gi');
        const highlightedText = originalText.replace(regex, '<mark class="search-highlight">$1</mark>');
        element.innerHTML = highlightedText;
    }
    
    function removeHighlight(card) {
        const elementsToUnhighlight = card.querySelectorAll('.kad-product-title, .kad-product-desc, .kad-product-category');
        elementsToUnhighlight.forEach(element => {
            if (element.dataset.originalText) {
                element.textContent = element.dataset.originalText;
            }
        });
    }
    
    function escapeRegExp(string) {
        return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
    }
    
    function showNoResultsMessage(searchTerm, category) {
        let existingMessage = document.getElementById('no-results-message');
        if (!existingMessage) {
            const message = document.createElement('div');
            message.id = 'no-results-message';
            message.className = 'no-results-message';
            message.innerHTML = `
                <div class="no-results-content">
                    <i class="fas fa-search-minus"></i>
                    <h3>No se encontraron productos</h3>
                    <p id="no-results-text"></p>
                    <div class="search-suggestions">
                        <p><strong>Sugerencias:</strong></p>
                        <ul>
                            <li>Verifica la ortografía</li>
                            <li>Usa palabras más generales</li>
                            <li>Prueba con términos diferentes</li>
                            <li>Revisa otra categoría</li>
                        </ul>
                    </div>
                </div>
            `;
            document.getElementById('products-grid').appendChild(message);
        }
        
        // Actualizar el texto del mensaje
        const noResultsText = document.getElementById('no-results-text');
        if (searchTerm && category) {
            noResultsText.textContent = `No hay productos que coincidan con "${searchTerm}" en la categoría "${category}".`;
        } else if (searchTerm) {
            noResultsText.textContent = `No hay productos que coincidan con "${searchTerm}".`;
        } else if (category) {
            noResultsText.textContent = `No hay productos en la categoría "${category}".`;
        }
    }
    
    function hideNoResultsMessage() {
        const existingMessage = document.getElementById('no-results-message');
        if (existingMessage) {
            existingMessage.remove();
        }
    }
    
    function clearSearch() {
        searchInput.value = '';
        categoryFilter.value = '';
        filterProducts();
        searchInput.focus();
    }
    
    // Event listeners
    searchInput.addEventListener('input', filterProducts);
    categoryFilter.addEventListener('change', filterProducts);
    clearSearchBtn.addEventListener('click', clearSearch);
    
    // Limpiar búsqueda con Escape
    searchInput.addEventListener('keydown', function(e) {
        if (e.key === 'Escape') {
            clearSearch();
        }
    });
}

function initializeProductTitleTooltips() {
    // Verificar si los títulos están truncados y ajustar tooltips
    const productTitles = document.querySelectorAll('.kad-product-title');
    
    productTitles.forEach(title => {
        // Solo mostrar tooltip si el texto está truncado
        if (title.scrollHeight > title.clientHeight || title.scrollWidth > title.clientWidth) {
            title.style.cursor = 'help';
            
            // Opcional: agregar evento para mostrar tooltip personalizado
            title.addEventListener('mouseenter', function() {
                if (this.scrollHeight > this.clientHeight) {
                    this.setAttribute('data-truncated', 'true');
                }
            });
        } else {
            // Remover título si no está truncado para evitar tooltip innecesario
            title.removeAttribute('title');
        }
    });
    
    // Hacer lo mismo para categorías y descripciones
    const categories = document.querySelectorAll('.kad-product-category');
    categories.forEach(category => {
        if (category.scrollWidth > category.clientWidth) {
            category.style.cursor = 'help';
        } else {
            category.removeAttribute('title');
        }
    });
    
    const descriptions = document.querySelectorAll('.kad-product-desc');
    descriptions.forEach(desc => {
        if (desc.scrollHeight > desc.clientHeight) {
            desc.style.cursor = 'help';
        } else {
            desc.removeAttribute('title');
        }
    });
}

function showQuickView(productId) {
    // Implementar vista rápida del producto
    window.location.href = '@Url.Action("DetallesProducto", "Home")?id=' + productId;
}

// Hacer la función disponible globalmente
window.updateCartCounts = updateCartCounts;
</script>